

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import static com.mongodb.client.model.Filters.elemMatch;
import static com.mongodb.client.model.Filters.regex;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import org.bson.Document;

///*
// * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
// * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
// */
//package facebookmessagesmongodbjava;
//
///**
// *
// * @author User

public class facebookAFRame extends javax.swing.JFrame {

    /**
     * Creates new form facebookAFRame
     */
    public facebookAFRame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(facebookAFRame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(facebookAFRame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(facebookAFRame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(facebookAFRame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new facebookAFRame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
//}






public class facebookTestForm extends javax.swing.JFrame {

    public facebookTestForm() {
        initComponents();
        Connect();
    }
MongoClient mongo;
    MongoDatabase dbconnection;
    MongoCollection<org.bson.Document> collection;

    public final void Connect()
    {            
        mongo = MongoClients.create();
        dbconnection = mongo.getDatabase("prac8db");
        collection = dbconnection.getCollection("messages");  
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        btnCollectionName = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDisplay = new javax.swing.JTextArea();
        btnGetArrayDocuments = new javax.swing.JButton();
        btnCount = new javax.swing.JButton();
        btnCountSpring = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnCollectionName.setText("Collection name");
        btnCollectionName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCollectionNameActionPerformed(evt);
            }
        });

        txtDisplay.setColumns(20);
        txtDisplay.setRows(5);
        jScrollPane1.setViewportView(txtDisplay);

        btnGetArrayDocuments.setText("Get array documents");
        btnGetArrayDocuments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetArrayDocumentsActionPerformed(evt);
            }
        });

        btnCount.setText("Count");
        btnCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCountActionPerformed(evt);
            }
        });

        btnCountSpring.setText("Count spring");
        btnCountSpring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCountSpringActionPerformed(evt);
            }
        });

        jLabel1.setText("facebook Messages Practical 8 u25267869");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnGetArrayDocuments, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCollectionName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCountSpring, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(90, 90, 90))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCollectionName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGetArrayDocuments)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCount)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCountSpring)
                .addGap(99, 99, 99))
        );

        pack();
    }// </editor-fold>                        
    public  List<String> getAllCollections() {
        List<String> collectionNames = new ArrayList<>();

        try (MongoClient client = MongoClients.create("mongodb://localhost:27017")) {
            MongoDatabase db = client.getDatabase("prac8db"); // replace with your database name

            for (String name : db.listCollectionNames()) {
                collectionNames.add(name);
            }

        } catch (Exception e) {
           txtDisplay.setText("Error retrieving collections: " + e.getMessage());
        }

        return collectionNames;
    }

   public void printAllCollections() {
        List<String> collections = getAllCollections();
        if (collections.isEmpty()) {
            txtDisplay.setText("No collections found in database.");
        } else {
            StringBuilder output = new StringBuilder();
            output.append("Collections in database 'prac8db':\n");
            output.append("=====================================\n\n");
            
            // Loop through and display each collection name
            for (String name : collections) {
                output.append("  - ").append(name).append("\n");
            }
            
            output.append("\nTotal collections: ").append(collections.size());
            txtDisplay.setText(output.toString());
        }
        
    }
public List<Document> getArrayDocuments() {
    List<Document> arrayDocs = new ArrayList<>();
    try {
        FindIterable<Document> documents = collection.find();
        
        for (Document doc : documents) {
            // Check if document has a 'data' field that is an array
            if (doc.get("data") instanceof List) {
                arrayDocs.add(doc);
            }
        }
    } catch (Exception e) {
        txtDisplay.setText("Error retrieving array documents: " + e.getMessage());
    }
    return arrayDocs;
}

/**
 * Displays all documents that contain arrays in a formatted way
 */
public void printArrayDocuments() {
    List<Document> arrayDocs = getArrayDocuments();
    
    if (arrayDocs.isEmpty()) {
        txtDisplay.setText("No documents with arrays found in the collection.");
    } else {
        StringBuilder output = new StringBuilder();
        output.append("Documents containing arrays:\n");
        output.append("=====================================\n\n");
        
        int docCount = 1;
        for (Document doc : arrayDocs) {
            output.append("Document ").append(docCount++).append(":\n");
            
            // Get the 'data' array from the document
            List<?> dataArray = (List<?>) doc.get("data");
            output.append("  Number of posts: ").append(dataArray.size()).append("\n");
            
            // Display each post in the array
            output.append("  Posts:\n");
            for (int i = 0; i < dataArray.size(); i++) {
                Document post = (Document) dataArray.get(i);
                output.append("    [").append(i + 1).append("] ");
                
                // Get the 'from' object
                Document from = (Document) post.get("from");
                output.append("From: ").append(from.get("name"));
                output.append(" | Message: ").append(post.get("message"));
                output.append(" | Created: ").append(post.get("created_time")).append("\n");
            }
            output.append("\n");
        }
        
        output.append("Total documents with arrays: ").append(arrayDocs.size());
        txtDisplay.setText(output.toString());
    }
}

/**
 * Counts total number of documents in the messages collection
 * @return Count of all documents
 */
public long countAllDocuments() {
    try {
        return collection.countDocuments();
    } catch (Exception e) {
        txtDisplay.setText("Error counting documents: " + e.getMessage());
        return -1;
    }
}

/**
 * Displays the total count of documents in the collection
 */
public void printDocumentCount() {
    long count = countAllDocuments();
    
    if (count >= 0) {
        StringBuilder output = new StringBuilder();
        output.append("Document Count Report\n");
        output.append("=====================================\n\n");
        output.append("Collection: messages\n");
        output.append("Total documents: ").append(count).append("\n");
        
        // Also show if any documents have the 'data' array
        List<Document> arrayDocs = getArrayDocuments();
        output.append("Documents with 'data' arrays: ").append(arrayDocs.size()).append("\n");
        
        txtDisplay.setText(output.toString());
    }
}

/**
 * Counts documents that contain the word "spring" in any message field
 * Searches through the data array for posts containing "spring" (case-insensitive)
 * @return Count of documents with "spring" in messages
 */
public long countSpringDocuments() {
    try {
        // Use elemMatch to find documents where data array contains "spring" in message field
        long count = collection.countDocuments(
            elemMatch("data", regex("message", "spring", "i"))
        );
        return count;
    } catch (Exception e) {
        txtDisplay.setText("Error counting spring documents: " + e.getMessage());
        return -1;
    }
}

/**
 * Retrieves and displays all documents containing "spring" in message field
 */
public void printSpringDocuments() {
    try {
        // Find documents where data array contains "spring" in message field
        FindIterable<Document> springDocs = collection.find(
            elemMatch("data", regex("message", "spring", "i"))
        );
        
        StringBuilder output = new StringBuilder();
        output.append("Documents containing 'spring' in messages:\n");
        output.append("=====================================\n\n");
        
        int count = 0;
        for (Document doc : springDocs) {
            count++;
            output.append("Document ").append(count).append(":\n");
            
            // Get data array and display only posts containing "spring"
            List<?> dataArray = (List<?>) doc.get("data");
            output.append("  Posts containing 'spring':\n");
            
            for (Object postObj : dataArray) {
                Document post = (Document) postObj;
                String message = post.getString("message");
                
                // Check if this post contains "spring" (case-insensitive)
                if (message != null && message.toLowerCase().contains("spring")) {
                    Document from = (Document) post.get("from");
                    output.append("    - From: ").append(from.get("name"));
                    output.append(" | Message: ").append(message);
                    output.append(" | Created: ").append(post.get("created_time")).append("\n");
                }
            }
            output.append("\n");
        }
        
        if (count == 0) {
            output.append("No documents found containing 'spring' in messages.\n");
        } else {
            output.append("Total documents found: ").append(count);
        }
        
        txtDisplay.setText(output.toString());
        
    } catch (Exception e) {
        txtDisplay.setText("Error retrieving spring documents: " + e.getMessage());
    }}
    /**
     * Clears the display text area
     */
    public void clearDisplay() {
        txtDisplay.setText("");
    }
    
    private void btnCollectionNameActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:                                            
   clearDisplay();
   printAllCollections();
    }                                                 

    private void btnGetArrayDocumentsActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        // TODO add your handling code here:
        clearDisplay();
        printArrayDocuments();
    }                                                    

    private void btnCountActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        clearDisplay();
        printDocumentCount();
    }                                        

    private void btnCountSpringActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
        clearDisplay();
        printSpringDocuments();
    }                                              

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(facebookTestForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(facebookTestForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(facebookTestForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(facebookTestForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new facebookAFRame().setVisible(true);
            }
        });
}

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnCollectionName;
    private javax.swing.JButton btnCount;
    private javax.swing.JButton btnCountSpring;
    private javax.swing.JButton btnGetArrayDocuments;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtDisplay;
    // End of variables declaration                   
}}

